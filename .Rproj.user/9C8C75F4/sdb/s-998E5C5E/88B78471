{
    "collab_server" : "",
    "contents" : "---\ntitle: \"OncoMix Vignette\"\nauthor: \"Daniel G. PiquÃ©\"\ndate: \"`r Sys.Date()`\"\noutput:\n    html_document:\n        toc: true\n        toc_float:\n            collapsed: false\n            smooth_scroll: false\nvignette: >\n    %\\VignetteIndexEntry{OncoMix Vignette}\n    %\\VignetteEngine{knitr::rmarkdown}\n    \\usepackage[utf8]{inputenc}\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo=TRUE, warning=FALSE, message=FALSE)\n```\n\n## 1. Introduction\n\n### 1.1 Motivation for developing OncoMix\n\nThe advent of large, well-curated databases, such as the [genomic data\ncommons](https://gdc.cancer.gov/), that contain RNA sequencing data from\nhundreds of patient tumors has made it possible to identify oncogene candidates\nsolely based off of patterns present in mRNA expression data. OncoMix is the\nfirst method developed to identify oncogenes in a visually-interpretable manner\nfrom RNA-sequencing data in large cohorts of patients.\n\nOncoMix is an R package for identifying oncogene candidates based off of\n2-component Gaussian mixture models. It estimates parameters using the\nexpectation maximization procedure as implemented in the R package mclust. This\ntutorial will demonstrate how to identify oncogene candidates from a set of mRNA\nsequencing data. We start by loading the package:\n\n```{r}\n#devtools::install_github(\"dpique/oncomix\")\nlibrary(oncomix)\n```\n\nWe then pose the following question, the answer to which forms the basis for\nthis method:\n\n### 1.2 What should the distribution of oncogene mRNA expression in a population\nof tumors and adjacent normal tissue ideally look like?\n\n```{r}\nlibrary(ggplot2)\noncomix::oncoMixIdeal()\n```\n\nThe x-axis represents mRNA expression values, with lower values toward the left\nand larger values (i.e. higher expression) toward the right. The y axis\nrepresents density. The teal curves represent the best-fitting Gaussian\nprobability distribution (PD) over expression values from a single gene obtained\nfrom multiple tumor samples. The red-orange curves represent the PD over\nexpression values from the same gene obtained from multiple adjacent normal\ntissue samples. This mixture model is applied once to the tumor data and again\n(separately) to the adjacent normal data, hence the 4 curves.\n\nThe advantage of applying a 2-component mixture model is that we are able to\ncapture biologically-relevant clusters of gene expression that may naturally\nexist in the data. Otherwise, we might represent our data with just a single\ncurve sitting in the middle of what really are 2 distinct clusters. Visually, we\nsee that for a theoretical oncogene, there is a *subgroup* of tumors that\noverexpresses this gene relative to normal tissue.\n\n### 1.3 Conceptual comparison of oncomix to classical differential expression\nmethods\n\n\nWe now conceptually compare oncomix to the techniques employed by traditional\ndifferential expression analysis (e.g. Student's t-test, as employed by\n[limma](https://www.ncbi.nlm.nih.gov/pubmed/25605792), or\n[DESeq2](https://www.ncbi.nlm.nih.gov/pubmed/25516281)). These approaches make\nstrong assumptions -- namely, that the data from a particular group are\nwell-described by distributions with mass concentrated around a central value\n(such as a 'mean'). If we were to use one of these approaches on a large\ndataset, our assumption would be that oncogenes are overexpressed in *every*\ntumor sample compared to normal tissue. This assumption can be visualized below:\n\n```{r}\noncoMixTraditionalDE()\n```\n\nThe red-orange curve represents the gene expression values from the adjacent\nnormal data, and the teal curve represents the gene expression values from the\ntumor data. Note, however, that the goal for a classical DE analysis, such as\nthat employed by limma, would be to find genes that maximize the difference\nbetween these two curves. This approach does not represent our knowledge of how\noncogenes are expressed in a population of individuals -- that is, highly\nexpressed in a subset of patient tumors, and lowly expressed in adjacent normal\ntissue.\n\n## 2. Identifying Oncogene Candidates\n\n### 2.1 Loading example data and exploring the `mixModelParams` object\n\nNow, we will load an example dataset that contains expression values for 4789\nmRNA isoforms obtained from paired samples of breast tumor (`dfTumorIsof`) and\nadjacent normal(`dfNmlIsof`) breast tissue from 113 patients. We will fit the\nmixture model using the oncomix function `mixModelParams`, which takes\ndataframes that contain patients as rows and mRNA isoforms/genes as columns. The\nnumber of columns (genes) should be the same between both dataframes, though the\nnumber of rows can vary.\n\n```{r}\ndata(dfNmlIsof, dfTumorIsof, package=\"oncomix\")\n\ndim(dfNmlIsof)\ndfNmlIsof[1:5, 1:5] \n##look at the matrix of mRNA expression data from adjacent normal samples\n\ndim(dfTumorIsof)\ndfTumorIsof[1:5, 1:5] \n#$look at the matrix of mRNA expression data from tumors\n\nmmParams <- oncomix::mixModelParams(dfNmlIsof, dfTumorIsof) \n##fits the mixture models, will take a few minutes\nhead(mmParams)\n```\n\nThe object returned by `mixModelParams` is a dataframe with rows corresponding\nto genes and 12 columns containing mixture model parameters. The rows are sorted\naccording to the `score` column, with the first row containing the highest\noncomix score (defined below). The meaning of the dataframe columns are\ndescribed below:\n\n    - `nMu1` = the mean ($\\mu$) of the Gaussian curve with the smaller mean\n    fit to the adjacent normal expression data (referred to as Mode 1).\n    - `nMu2` = the mean ($\\mu$) of the Gaussian curve with the larger mean fit\n    to the adjacent normal expression data (referred to as Mode 2).\n    - `nVar` = the variance ($\\sigma$) of the two Gaussian curves fit to the\n    adjacent normal expression data (fixed to be equal between the two curves)\n    - `nPi1` = the proportion of adjacent normal samples assigned to the\n    Gaussian curve with mean `nMu1`\n\n    - `tMu1` = the mean ($\\mu$) of the Gaussian curve with the smaller mean\n    fit to the tumor expression data (referred to as Mode 1).\n    - `tMu2` = the mean ($\\mu$) of the Gaussian curve with the larger mean fit\n    to the tumor expression data. (referred to as Mode 2).\n    - `tVar` = the variance ($\\sigma$) of the two Gaussian curves fit to the\n    tumor expression data (fixed to be equal between the two curves).\n    - `tPi1` = the proportion of tumor samples assigned to the Gaussian curve\n    with mean `tMu1`.\n\n    - `deltaMu2` = the difference between the means of the two curves between\n    groups. `tMu2` - `nMu2`. May be negative or positive.\n    - `deltaMu1` = the difference between the means of the two curves between\n    groups. `tMu1` - `nMu1`. May be negative or positive.\n    - `SI` = the selectivity index, or the proportion of adjacent normal samples\n    with expression values less than the boundary defined by `tMu2` -\n    `tMu1`. The selectivity index for the ith gene is computed as:\n\n    $$SI_i  = \\frac{1}{N}\\sum_{j=1}^N \\Bigg\\{ \\begin{array}{ll} 1,~ if~x_{ij} <\n    \\frac{\\mu_{iLT}+\\mu_{iHT}}{2}  \\\\ \n    0, ~ otherwise \n    \\end{array},\n    $$\n\n    - where $N$ is the number of adjacent normal samples, and $x_{ij}$ is the\n    expression value of the ith gene in the jth adjacent normal sample.\n    $\\mu_{iHT}$ is the mean of higher/larger Gaussian from the ith gene in tumor\n    samples, and $\\mu_{iLT}$ is the mean of the smaller/lower Gaussian from the\n    ith gene in the tumor samples.\n\n    - `score` = The score for the $i^{th}$ gene is calculated as follows: \n    $$score_i  = SI * [(\\Delta\\mu_{2i} - \\Delta\\mu_{1i}) - (var_{Ni} -\n    var_{Ti})] ~~~~~, $$\n\n    - where $SI$ is the selectivity index described above, $\\Delta\\mu_{2i}$ and\n    $\\Delta\\mu_{1i}$ are as described above (equivalent to `deltaMu2` and\n    `deltaMu1`), $var_{Ni}$ is the common variance across the adjacent normal\n    samples (equivalent to `n.var`), and $var_{Ti}$ is the common variance\n    across the tumor samples (equivalent to `tVar`).\n\n### 2.3 Selecting genes that appear most like idealized oncogene candidate\n\nWe can now use the `mmParams` dataframe to figure out which of our isoforms in\nour gene set are most similar in terms of their distribution to our ideal\noncogene candidate.\n\nFor example, lets say that we wanted to select a subset of gene isoforms that\nmost resembled the theoretically ideal oncogene. We can capture all of the genes\nmeeting or exceeding specified thresholds using the `topGeneQuant` function.\nHere, we want to maximize `deltMu2`, minimize `deltMu1`, and maximize the `SI`.\n\n```{r}\ntopGeneQuant <- oncomix::topGeneQuants(mmParams, deltMu2Thr=99, \n    deltMu1Thr=10, siThr=.99)\nprint(topGeneQuant)\n```\n\nThe results of the `topGeneQuants` function is to return a subsetted dataframe\ncontaining only those isoforms that met or exceeded the specified threshold.\nHere, there were `r nrow(topGeneQuant)` isoforms.\n\nWe can also select the top $N$ genes that most closely resemble the oncogene\ncandidate by simply selecting the first $N$ rows from the `mmParams` object\n(e.g. `mmParams[1:N,]`). This is because the `mixModelParams` function returns a\ndataframe sorted by the score, with the 1st row containing the isoform with the\nhighest score. There is an explanation of how the score is calculated above.\n\n```{r}\nmmParamsTop10 <- mmParams[1:10,]\nprint(mmParamsTop10)\n```\n\n## 3. Visualize the output\n\n### 3.1 Visualize isoforms with a high SI & oncomix score\n\nNow, we will visualize the distribution of gene expression values for a\nparticular isoform. Specifically, we will create a overlapping histogram of an\nsingle isoform's expression values across both tumor (teal) and adjacent normal\n(red) samples with the best-fitting Gaussian curves superimposed. The isoform\nthat we want to visualize here, uc002jxc.2, is among the 5 isoforms in the\noutput from `topGeneQuant` function. It also ranks 7th out of 4789 isoforms in\nterms of its oncomix score, so it should have a distributional profile that is\nmore similar to our theoretical oncogene that most other isoforms in this\ndataset.\n\n```{r}\nisof = \"uc002jxc.2\"\nplotGeneHist(mmParams, dfNmlIsof, dfTumorIsof, isof)\n```\n\nNext, we will create a scatterplot with the axes corresponding to the\ndifferences between component means. Our oncogene candidates will be those genes\nthat appear in the upper right quadrant of this scatterplot. The x axis\ncorresponds to the difference between the means of the curves with the larger\nGaussians (`deltaMu2`), and the y axis corresponds to the difference between the\nmeans of the curves with the smaller Gaussians (`deltaMu1`) between the two\ntreatments.\n\nHere, $\\alpha$ (in the title) is a term that is present in the denominator of\nthe value of the y-axis and functions as an automatic scaling parameter to set\nthe range of the y-axis to be approximately equal to the range of the x-axis.\n\n```{r, fig.width=7, fig.height=6.5}\nscatterMixPlot(mmParams)\n```\n\nWe would expect isoforms that maximize deltaMu1 and minimize deltaMu2 to be most\nvisually similar to the theoretical oncogene candidate, and thus to be present\nwithin the upper right quadrant of this histogram. However, due to the large\nvariance displayed by some of these isoforms, not all isoforms in the upper\nright quadrant appear like the theoreticaly ideal oncogene. We developed an\nindex, termed the selectivity index (SI), that helps highlight genes that follow\nour ideal profile. The SI ranges from 0 to 1, and genes with a larger\nselectivity index will follow more closely the ideal oncogene. Now, we will\nhighlight the isoforms with a selectivity index greater than .99 using the\n`selIndThresh` argument to narrow our search.\n\n```{r, fig.width=7, fig.height=6.5}\nscatterMixPlot(mmParams, selIndThresh=.99)\n```\n\nWe can also highlight where the top 10 isoforms with the highest score fall in\nthe scatterplot.\n\n```{r}\nscatterMixPlot(mmParams=mmParams, geneLabels=rownames(mmParamsTop10))\n```\n\n### 3.2 Visualize the distribution of isoforms that map to oncogenes in an\nonline database\n\nWe can check the distribution of the isoforms that map to known human oncogenes.\nTo do this, we will use genes classified as oncogenes from the [ONGene\ndatabase](http://ongene.bioinfo-minzhao.org/), which is first literature-curated\ndatabase of oncogenes. This paper was published in 2017.\n\nWe will then map the oncogenes in the database (which are in gene symbols) to\nucsc isoforms, which is the gene format that we have in our original datasets,\nusing an R interface to the public UCSC MySQL database. We'll show where the top\n5 isoforms mapping to oncogenes in the ONGene database land on this scatterplot.\n\n```{r}\n#install.packages(\"RMySQL\")\nlibrary(RMySQL)\n\n#read in a table of known human oncogenes from the ONGene database\nongene <- read.table(\"http://ongene.bioinfo-minzhao.org/ongene_human.txt\",\n    header=TRUE, sep=\"\\t\", quote=\"\", stringsAsFactors=FALSE, row.names=NULL)\n\n#send a sql query to UCSC to map the human oncogenes to ucsc isoform ids\nucsc_genome <- dbConnect(MySQL(), user=\"genome\", \n    host=\"genome-mysql.cse.ucsc.edu\", db='hg19')\ncreateGeneQuery <- function(name){ #name is a character vector\n    p1 <- paste(name, collapse='\\',\\'')\n    p2 <- paste('(\\'',p1, '\\')',sep=\"\")\n    return(p2)\n}\ngene_q <- createGeneQuery(ongene$OncogeneName)\nquery_res <- dbGetQuery(ucsc_genome, \n    paste0(\"SELECT kgID, geneSymbol FROM kgXref WHERE geneSymbol IN \",\n        gene_q, \" ;\"))\ndbDisconnect(ucsc_genome)\n\n#Merge the query_res & mmParams dataframes\nquery_res$kgIDs <- substr(query_res$kgID, 1, 8)\nmmParams$kgIDs <- substr(rownames(mmParams), 1, 8)\nmmParams$kgID <- rownames(mmParams)\nmmParamsMg <- merge(mmParams, query_res, by=\"kgIDs\", all.x=TRUE)\nrownames(mmParamsMg) <- mmParamsMg$kgID.x\n\n# Show the top 5 isoforms with the highest score \n#in our dataset that map to known oncogenes\nmmParamsMg <- mmParamsMg[with(mmParamsMg, order(-score)), ]\nmmParamsMgSbst <- subset(mmParamsMg, !is.na(geneSymbol))[1:5,]\nprint(mmParamsMgSbst)\n\nscatterMixPlot(mmParams=mmParams, geneLabels=rownames(mmParamsMgSbst))\n```\n\nIf you are interested in a particular oncogene, then you can plug the name of\nthat gene (as long as it is in your original dataset) into the `gene_labels`\nargument of the `scatterMixPlot` function, which will highlight those genes\nentered into the `gene_labels` argument on the scatterplot.\n\nNote: Not all well-characterized oncogenes fall into or near the upper right\nquadrant of this scatterplot (explored more in the analysis below). This is\nexpected because oncogenes can arise via a variety of mechanisms, such as via\nmutational activation (eg BRAF V600E), which may not be associated with\nincreased expression of the gene. mRNA overexpresion is one of several ways that\nan oncogene can drive tumor behavior, and it is this class of oncogenes that our\nmethod seeks to detect.\n\n### 3c. Visualize the distribution of the OncoMix score\n\nLastly, we will check the distribution of the OncoMix `score` across all gene\nisoforms. The histograms are superimposed and are colored by whether the isoform\nmaps to a gene in the ONGene database (orange, n = `r\ntable(is.na(mmParamsMg$geneSymbol))[1]`) or not (purple, n = `r\ntable(is.na(mmParamsMg$geneSymbol))[2]`).\n\n```{r}\nlibrary(RColorBrewer)\ncol <- brewer.pal(3, \"Dark2\")\nggplot(mmParamsMg, aes(x=score, y=..density.., fill=is.na(geneSymbol))) +\n    geom_histogram(data=subset(mmParamsMg, is.na(geneSymbol)), \n        fill=col[2], alpha=0.5) + \n    geom_histogram(data=subset(mmParamsMg, !is.na(geneSymbol)), \n        fill=col[3], alpha=0.5) +   \n    theme_classic() + xlab(\"OncoMix Score\") + theme_classic() \n```\n\nThe distribution of the OncoMix scores looks equivalent between isoforms in the\nONGene database versus those not in the ONGene database. However, the short\nright tail of this distribution, which contains isoforms with high scores, also\npreferentially consists of isoforms that map to genes in the ONGene database. In\naddition, the few isoforms that are not in the ONGene database and that have\nhigh scores may represent oncogenes that are yet to be discovered.\n\n## 4. Session Info\n\n```{r}\nsessionInfo()\n```\n\nPlease email me at daniel.pique@med.einstein.yu.edu with any suggestions,\nquestions, or comments. Thank you!\n",
    "created" : 1505408723548.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2317039076",
    "id" : "88B78471",
    "lastKnownWriteTime" : 1505412266,
    "last_content_update" : 1505412266746,
    "path" : "//data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix/vignettes/oncomix.Rmd",
    "project_path" : "vignettes/oncomix.Rmd",
    "properties" : {
        "last_setup_crc32" : "43496672328f7b19"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}