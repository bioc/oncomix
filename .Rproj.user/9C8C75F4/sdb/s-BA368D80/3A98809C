{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Step 1 - Visualization of Delta Mu2 and Mu1 & Identification of Oncogene Candidates\"\nauthor: \"Daniel Piqu?\"\ndate: \"`r Sys.Date()`\"\noutput: html_document\n---\n\n```{r setup, include=F}\nknitr::opts_knit$set(root.dir = \"\\\\\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/\", verbose=F, message=F, warning=F, cache=TRUE)\nknitr::opts_chunk$set(message = FALSE, warning = FALSE, cache=TRUE)\n```\n\n1. Now, we are going to plot the distribution of deltaMu2 and deltaMu1 for each isoform, and select those isoforms with highly favorable values (eg large deltaMu2, small deltaMu1)\n\n```{r}\nload(\"output/2016_12_04_OncoMix.RData\") #loaded from 0_OncoMix_SetUp.R script\n\nlibrary(VennDiagram) \nlibrary(RColorBrewer)\nlibrary(mclust)\nlibrary(oncoMix)\nlibrary(ggplot2)\n\nMixModelParamsSelect <- MixModelParams[isoformsUnconfounded,]\n\nprint(dim(MixModelParamsSelect))\n\ncolors_red=brewer.pal(n=9, name=\"Reds\")[3:7] \ncolors_paired=brewer.pal(n=12, name=\"Paired\")\n\n#add in quantiles\nquants = c(0.01, 0.10, 0.50, 0.90, 0.99)\ndeltaMu2Quant <- quantile(MixModelParamsSelect[,\"deltaMu2\"], quants)\nprint(deltaMu2Quant)\ndeltaMu1Quant <- quantile(1/(abs(MixModelParamsSelect[,\"deltaMu1\"]) + 0.1), quants)\nprint(deltaMu1Quant)\nselectedIsoforms <- rownames(MixModelParamsSelect)[1/(abs(MixModelParamsSelect[,\"deltaMu1\"]) + 0.1) > deltaMu1Quant[2] & MixModelParamsSelect[,\"deltaMu2\"] > deltaMu2Quant[5]]\n\nselIdx <- MixModelParamsSelect[selectedIsoforms,\"SI\"] #these 21 isoforms meet the quantile-based threshold for deltaMu1 and deltaMu2\nselIdx_thresh = 0.99\nselectedIsoforms <- names(selIdx)[selIdx > selIdx_thresh]\nprint(selectedIsoforms) #these are the 11 OC isoforms\n\n```\n\n\n```{r}\nselectivityColors <- rep(\"black\", length(selIdx))\nselectivityColors[selIdx >selIdx_thresh] <- colors_paired[10]\n\n#goal - sort genes by 1/(abs(u1) +0.1); plot them by row\nselectedIsoforms <- selectedIsoforms[order(-1/(abs(MixModelParams[selectedIsoforms,\"deltaMu1\"]) + 0.1))]\nprint(selectedIsoforms)\n\nfig1a <- ggplot(data = as.data.frame(MixModelParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1))) + geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,5)) + geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,5,1,1,1)) + geom_point(color=\"grey\", alpha = 0.1) + geom_point(data = as.data.frame(MixModelParamsSelect), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1)), alpha = 0.75) + theme_classic() + geom_point(data = as.data.frame(MixModelParamsSelect[selectedIsoforms,]), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1)), size = 10, alpha=0.5, col=colors_paired[10], fill=colors_paired[10]) + theme(text = element_text(size=30)) + xlim(c(-6, 6))\nfig1a\n#ggsave(paste0(Sys.Date(), \"_fig1a_meanDiff.pdf\"), path=imagesDir)\n\nfig1b <- ggplot(data = as.data.frame(selIdx), aes(y =  as.factor(\"selectivity\"), x = selIdx)) + geom_jitter(width = 0.00, size = 4, alpha = 0.5, color = selectivityColors) + theme_classic() + coord_fixed(ratio = 0.05) + xlim(c(0.2, 1.0)) + xlab(\"Selectivity Index\") + ylab(\"\") + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x = element_line(size = 1), axis.line = element_blank(), text = element_text(size=25)) + geom_vline(xintercept = selIdx_thresh, col = \"Black\", linetype = 2, size = 1) + scale_x_continuous(breaks=c(0.2, 0.4, 0.6, 0.8, selIdx_thresh)) \nfig1b\n#ggsave(paste0(Sys.Date(), \"_fig1b_selInd.pdf\"), path=imagesDir)\n\n```\n\n\n2. Now, we will show the same plot, but will include Her2/ERBB2 isoforms (shown in blue).\n```{r}\nerbb2_isoforms <- c(\"uc002hso.2\", \"uc010wek.1\", \"uc010cwb.2\", \"uc002hsp.2\", \"uc002hsm.2\", \"uc002hsl.2\")\n\nsupplFig1a <- ggplot(data = as.data.frame(MixModelParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1))) + geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,5)) + geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,5,1,1,1)) + geom_point(color=\"grey\", alpha = 0.1) + geom_point(data = as.data.frame(MixModelParamsSelect), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1)), alpha = 0.75) + theme_classic() + geom_point(data = as.data.frame(MixModelParamsSelect[selectedIsoforms,]), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1)), size = 10, alpha=0.5, col=colors_paired[10], fill=colors_paired[10]) + geom_point(data = as.data.frame(MixModelParams[erbb2_isoforms,]), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+0.1)), size = 10, alpha=0.5, col=colors_paired[2], fill=colors_paired[2]) + theme(text = element_text(size=30)) + xlim(c(-6, 6))\nsupplFig1a\n\n\n#note that several erbb2 isoforms have a high SI and fall within the upper right quadrant, as we would expect\nselIdx_erbb2 <- MixModelParams[c(names(selIdx),erbb2_isoforms),\"SI\"] \nprint(selIdx_erbb2) \n\nselectivityColors_erbb2 <- rep(\"black\", length(selIdx_erbb2))\nselectivityColors_erbb2[selIdx > selIdx_thresh] <- colors_paired[10]\nselectivityColors_erbb2[names(selIdx_erbb2) %in% erbb2_isoforms] <- colors_paired[2]\n\n#supplFig1b <- ggplot(data = as.data.frame(selIdx_erbb2), aes(y =  as.factor(\"selectivity\"), x = selIdx_erbb2)) + geom_jitter(width = 0.00, size = 4, alpha = 0.5, colour = selectivityColors) + theme_classic() + coord_fixed(ratio = 0.10) + xlim(c(0.2, 1.0)) + xlab(\"Selectivity Index\") + ylab(\"\") + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line = element_blank(), text = element_text(size=20)) + geom_vline(xintercept = selIdx_thresh, col = \"Black\", linetype = 2) + scale_x_continuous(breaks=c(0.2, 0.4, 0.6, 0.8, selIdx_thresh)) \n\nsupplFig1b <- ggplot(data = as.data.frame(selIdx_erbb2), aes(y =  as.factor(\"selectivity\"), x = selIdx_erbb2)) + geom_jitter(width = 0.00, size = 4, alpha = 0.5, color = selectivityColors_erbb2) + theme_classic() + coord_fixed(ratio = 0.05) + xlim(c(0.2, 1.0)) + xlab(\"Selectivity Index\") + ylab(\"\") + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.ticks.x = element_line(size = 1), axis.line = element_blank(), text = element_text(size=25)) + geom_vline(xintercept = selIdx_thresh, col = \"Black\", linetype = 2, size = 1) + scale_x_continuous(breaks=c(0.2, 0.4, 0.6, 0.8, selIdx_thresh)) \n\nsupplFig1b\n\n```\n\n3. Next, we're going to plot the distributions of the selected isoforms with an SI > `selIdx_thresh`. We can also show the isoforms both before and after the selectivity index (ie low SI vs high SI).\n\n```{r out.width = '50%', fig.show = \"hold\"}\n\nlibrary(extrafont)\nfont_import()\nSys.setenv(R_GSCMD = \"C:/Program Files/gs/gs9.05/bin/gswin32c.exe\")\nloadfonts(device=\"win\")\n\nfor(i in 1:length(selectedIsoforms)){\n  tidy_df <- as.data.frame(cbind(as.numeric(c(expression_matrix_log_transform_tumor[,selectedIsoforms[i]], expression_matrix_log_transform_matchedNormal[,selectedIsoforms[i]])), as.factor(c(rep(\"tumor\",nrow(expression_matrix_log_transform_tumor)), rep(\"normal\",nrow(expression_matrix_log_transform_matchedNormal))))), stringsAsFactors = F)\n  print(i)\n  colnames(tidy_df) <- c(\"expr\", \"type\")\n  \n  assign(paste(\"p\", i, sep = \"\"), ggplot(tidy_df, aes(x=expr, color=as.factor(type), fill=as.factor(type), group=as.factor(type))) + theme_classic() + geom_histogram(data=subset(tidy_df,type == 1),fill = \"#F8766D\", alpha = 0.2, aes(y=..density..)) + geom_histogram(data=subset(tidy_df,type == 2),fill = \"#00BFC4\", alpha = 0.2, aes(y=..density..)) + geom_rug(alpha=0.3, show.legend=FALSE) + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),legend.position = \"none\", plot.title = element_text(size = 12), axis.text=element_text(size=8), axis.line = element_blank() ,axis.title=element_text(size=8, family=\"Arial\")) + ggtitle(paste0(selectedIsoforms[i], \" : SI = \", round(MixModelParams[selectedIsoforms[i],\"SI\"],4))) + xlab(\"\") + #+ xlab(expression(log[2] *\"(TPM Reads)\")) \n  xlim(-0.2,10) + stat_function(fun = dnorm, colour = \"#F8766D\", args = list(mean = MixModelParams[selectedIsoforms[i],\"n.mu.2\"], sd=sqrt(MixModelParams[selectedIsoforms[i],\"n.var\"]))) + stat_function(fun = dnorm, colour = \"#F8766D\", args = list(mean = MixModelParams[selectedIsoforms[i],\"n.mu.1\"], sd=sqrt(MixModelParams[selectedIsoforms[i],\"n.var\"]))) + stat_function(fun = dnorm, colour = \"#00BFC4\", args = list(mean = MixModelParams[selectedIsoforms[i],\"t.mu.2\"], sd=sqrt(MixModelParams[selectedIsoforms[i],\"t.var\"]))) + stat_function(fun = dnorm, colour = \"#00BFC4\", args = list(mean = MixModelParams[selectedIsoforms[i],\"t.mu.1\"], sd=sqrt(MixModelParams[selectedIsoforms[i],\"t.var\"]))))\n}\n\nideal = oncoMix::oncoMixIdeal() #plot an ideal oncogene candidate\nprint(selectedIsoforms)\ngridExtra::grid.arrange(p2,p3,p1,  p4, p5, ncol = 2)\n\n```\n\nNext, we will show the isoforms with an `selIdx_thresh` < `r selIdx_thresh`. This is mainly for comparison and to demonstrate that the selectivity index is indeed useful for selecting isoforms that have a clearly separable group of tumors that highly express a gene.\n\n```{r}\n\nunSelectedIsoforms <- names(selIdx)[!selIdx > selIdx_thresh]\n\nprint(length(unSelectedIsoforms))\n\nfor(i in 1:length(unSelectedIsoforms)){\n  tidy_df <- as.data.frame(cbind(as.numeric(c(expression_matrix_log_transform_tumor[,unSelectedIsoforms[i]], expression_matrix_log_transform_matchedNormal[,unSelectedIsoforms[i]])), as.factor(c(rep(\"tumor\",nrow(expression_matrix_log_transform_tumor)), rep(\"normal\",nrow(expression_matrix_log_transform_matchedNormal))))), stringsAsFactors = F)\n  \n  colnames(tidy_df) <- c(\"expr\", \"type\")\n  assign(paste(\"p\", i, sep = \"\"), ggplot(tidy_df, aes(x=expr, color=as.factor(type), fill=as.factor(type), group=as.factor(type))) + theme_classic() + geom_histogram(data=subset(tidy_df,type == 1),fill = \"#F8766D\", alpha = 0.2, aes(y=..density..)) + geom_histogram(data=subset(tidy_df,type == 2),fill = \"#00BFC4\", alpha = 0.2, aes(y=..density..)) + geom_rug(alpha=0.3, show.legend=FALSE) + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),legend.position = \"none\", plot.title = element_text(size = 12), axis.text=element_text(size=8), axis.title=element_text(size=8)) + ggtitle(paste0(unSelectedIsoforms[i], \" : SI = \", round(MixModelParams[unSelectedIsoforms[i],\"SI\"],4))) +xlab(expression(Log[2] *\"(TPM Reads)\")) + xlim(-0.2,10) + stat_function(fun = dnorm, colour = \"#F8766D\", args = list(mean = MixModelParams[unSelectedIsoforms[i],\"n.mu.2\"], sd=sqrt(MixModelParams[unSelectedIsoforms[i],\"n.var\"]))) + stat_function(fun = dnorm, colour = \"#F8766D\", args = list(mean = MixModelParams[unSelectedIsoforms[i],\"n.mu.1\"], sd=sqrt(MixModelParams[unSelectedIsoforms[i],\"n.var\"]))) + stat_function(fun = dnorm, colour = \"#00BFC4\", args = list(mean = MixModelParams[unSelectedIsoforms[i],\"t.mu.2\"], sd=sqrt(MixModelParams[unSelectedIsoforms[i],\"t.var\"]))) + stat_function(fun = dnorm, colour = \"#00BFC4\", args = list(mean = MixModelParams[unSelectedIsoforms[i],\"t.mu.1\"], sd=sqrt(MixModelParams[unSelectedIsoforms[i],\"t.var\"]))))\n}\n\ngridExtra::grid.arrange(p1,p2,p3,p4, p5, p6, p7, p8, p9, p10, p11, p12, p13,p14,p15,p16,ncol = 4)\n\n```\n\n4. Next, we will plot the distributions of the ERBB2 isoforms\n\n```{r, echo=FALSE}\nprint(length(erbb2_isoforms))\n\nfor(i in 1:length(erbb2_isoforms)){\n  tidy_df <- as.data.frame(cbind(as.numeric(c(expression_matrix_log_transform_tumor[,erbb2_isoforms[i]], expression_matrix_log_transform_matchedNormal[,erbb2_isoforms[i]])), as.factor(c(rep(\"tumor\",nrow(expression_matrix_log_transform_tumor)), rep(\"normal\",nrow(expression_matrix_log_transform_matchedNormal))))), stringsAsFactors = F)\n  \n  colnames(tidy_df) <- c(\"expr\", \"type\")\n  #,\n  assign(paste(\"p\", i, sep = \"\"), ggplot(tidy_df, aes(x=expr, color=as.factor(type), fill=as.factor(type), group=as.factor(type))) + theme_classic() + geom_histogram(data=subset(tidy_df,type == 1),fill = \"#F8766D\", alpha = 0.2, aes(y=..density..)) + geom_histogram(data=subset(tidy_df,type == 2),fill = \"#00BFC4\", alpha = 0.2, aes(y=..density..)) + geom_rug(alpha=0.3, show.legend=FALSE) + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),legend.position = \"none\", plot.title = element_text(size = 12), axis.text=element_text(size=8), axis.line = element_blank() ,axis.title=element_text(size=8, family=\"Arial\")) + ggtitle(paste0(erbb2_isoforms[i], \" : SI = \", round(MixModelParams[erbb2_isoforms[i],\"SI\"],4))) + xlab(\"\") + xlim(-0.2,10) + stat_function(fun = dnorm, colour = \"#F8766D\", args = list(mean = MixModelParams[erbb2_isoforms[i],\"n.mu.2\"], sd=sqrt(MixModelParams[erbb2_isoforms[i],\"n.var\"]))) + stat_function(fun = dnorm, colour = \"#F8766D\", args = list(mean = MixModelParams[erbb2_isoforms[i],\"n.mu.1\"], sd=sqrt(MixModelParams[erbb2_isoforms[i],\"n.var\"]))) + stat_function(fun = dnorm, colour = \"#00BFC4\", args = list(mean = MixModelParams[erbb2_isoforms[i],\"t.mu.2\"], sd=sqrt(MixModelParams[erbb2_isoforms[i],\"t.var\"]))) + stat_function(fun = dnorm, colour = \"#00BFC4\", args = list(mean = MixModelParams[erbb2_isoforms[i],\"t.mu.1\"], sd=sqrt(MixModelParams[erbb2_isoforms[i],\"t.var\"]))))\n}\n\ngridExtra::grid.arrange(p1, p2, p3, p4, p5, p6, ncol = 2)\n\n```\n\nNow, we will save all of the data produced from this analysis into a new file.\n```{r}\nsave(list = ls(all.names = TRUE), file = \"output/2016_12_04_OncoMix_MeanDiffSelInd.RData\")\nsessionInfo()\n```\n\n",
    "created" : 1500307833718.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1256314724",
    "id" : "3A98809C",
    "lastKnownWriteTime" : 1498058918,
    "last_content_update" : 1498058918,
    "path" : "//data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/scripts/1_OncoMix_MeanDiffSelInd.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}