{
    "collab_server" : "",
    "contents" : "#' Generate the parameters for two 2-component Gaussian mixture models\n#' with equal variances\n#'\n#' This function allows you to generate the parameters for two 2-component\n#' Gaussian mixture model with equal variances from 2 matrices of data with\n#' a priori labels (eg tumor vs normal.) This application was originally\n#' intended for matrices of gene expression data treated with 2 conditions.\n#'\n#' @param dfNml A dataframe of normal data containing patients as rows and\n#' genes as columns\n#' @param dfTumor A dataframe of tumor data containing patients as rows and\n#' genes as columns\n#' @keywords oncoMix, mixture-model, two-component\n#' @return Returns a list of length 2, each element of which contains the\n#' parameters for the Normal or the Tumor data in a 3 x n matrix, where n\n#' is the number of patient samples\n#' @importFrom mclust Mclust mclustBIC\n#' @export\n#' @examples\n#' dfNml <- as.data.frame(matrix(data=rgamma(n=150, shape=2, rate=2),\n#' nrow=15, ncol=10))\n#' rownames(dfNml) <- paste0(\"patientN_\", 1:nrow(dfNml))\n#' colnames(dfNml) <- paste0(\"gene\", 1:ncol(dfNml))\n#'\n#' dfTumor <- as.data.frame(matrix(data=rgamma(n=150, shape=4, rate=3),\n#' nrow=15, ncol=10))\n#' rownames(dfTumor) <- paste0(\"patientT_\", 1:nrow(dfTumor))\n#' colnames(dfTumor) <- paste0(\"gene\", 1:ncol(dfTumor))\n#'\n#' mmParams <- mixModelParams(dfNml, dfTumor)\n\nmixModelParams <- function(dfNml, dfTumor) {\n    params_normal <- apply(dfNml, 2, function(x) {\n        y <- mclust::Mclust(data=x, G=2, modelNames=\"E\", verbose=FALSE)\n        z <- c(n.mu=y$parameters$mean,\n            n.var=y$parameters$variance$sigmasq,\n            n.pi.1=y$parameters$pro[1])\n        return(z)})\n\n    params_tumor <- apply(dfTumor, 2, function(x) {\n        y <- mclust::Mclust(data=x, G=2, modelNames=\"E\", verbose=FALSE)\n        z <- c(t.mu=y$parameters$mean,\n            t.var=y$parameters$variance$sigmasq,\n            t.pi.1=y$parameters$pro[1])\n        return(z)})\n\n    params <- rbind(params_normal, params_tumor)\n    deltaMu2 <- params[\"t.mu.2\",]-params[\"n.mu.2\",]\n    deltaMu1 <- params[\"t.mu.1\",]-params[\"n.mu.1\",]\n    boundaryTumor <- (params[\"t.mu.2\",] + params[\"t.mu.1\",]) / 2\n\n    si_calc <- function(vectNml, boundTumor){ #calculate the sel. idx\n        x <- sum(boundTumor > vectNml) / length(vectNml)\n        return(x)\n    }\n    SI <- sapply(1:ncol(dfNml),\n            function(i) si_calc(dfNml[,i], boundaryTumor[i]))\n\n    params <- rbind(params, deltaMu2, deltaMu1, SI)\n    mmParams.df <- data.frame(t(params))\n    mmParams.df$score <- mmParams.df$SI*{\n        (mmParams.df$deltaMu2-mmParams.df$deltaMu1)-\n        (mmParams.df$n.var+mmParams.df$t.var)}\n    mmParams.df.s <- mmParams.df[with(mmParams.df, order(-score)), ]\n    return(mmParams.df.s)\n}\n\n\n#' Plot a histogram of gene expression values from\n#' tumor and adjacent normal tissue.\n#'\n#' This function allows you to plot a histogram of gene expression values\n#' from tumor and adjacent normal tissue with the option of including the\n#' best fitting Gaussian curve.\n#'\n#' @param mmParams The output from the getMixModelParams function.\n#' @param dfNml The normal dataframe.\n#' @param dfTumor The tumor dataframe.\n#' @param isof The gene isoform to visualize\n#' @keywords oncoMix, visualization, Gaussian, two-component\n#' @return Returns a histogram of the gene expression\n#' values from the two groups.\n#' @export\n#' @examples\n#' dfNml <- as.data.frame(matrix(data=rgamma(n=150, shape=2, rate=2),\n#' nrow=15, ncol=10))\n#' rownames(dfNml) <- paste0(\"patient.n\", 1:nrow(dfNml))\n#' colnames(dfNml) <- paste0(\"gene\", 1:ncol(dfNml))\n#'\n#' dfTumor <- as.data.frame(matrix(data=rgamma(n=150, shape=4, rate=3),\n#' nrow=15, ncol=10))\n#' rownames(dfTumor) <- paste0(\"patient.t\", 1:nrow(dfTumor))\n#' colnames(dfTumor) <- paste0(\"gene\", 1:ncol(dfTumor))\n#'\n#' mmParams <- mixModelParams(dfNml, dfTumor)\n#' isof <- rownames(mmParams)[1]\n#' plotGeneHist(mmParams, dfNml, dfTumor, isof)\n#' @seealso \\code{\\link{mixModelParams}}\n\nplotGeneHist <- function(mmParams, dfNml, dfTumor, isof){\n    tidy_df <- as.data.frame(cbind(as.numeric(c(dfTumor[,isof], dfNml[,isof])),\n        as.factor(c(rep(\"tumor\",nrow(dfTumor)), rep(\"normal\",nrow(dfNml))))),\n        stringsAsFactors=FALSE)\n    colnames(tidy_df) <- c(\"expr\", \"type\")\n    expr <- type <- ..density.. <- NULL # Setting the variables to NULL first\n    p1 <- ggplot(tidy_df, aes(x=expr, color=as.factor(type),\n        fill=as.factor(type),\n        group=as.factor(type))) +\n    theme_classic() +\n    geom_histogram(data=subset(tidy_df,type == 1),fill=\"#F8766D\",\n        alpha=0.2, aes(y=..density..)) +\n    geom_histogram(data=subset(tidy_df,type == 2),fill=\"#00BFC4\",\n        alpha=0.2, aes(y=..density..)) +\n    geom_rug(alpha=0.3, show.legend=FALSE) +\n    theme(axis.title.y=element_blank(),\n        axis.text.y=element_blank(),\n        axis.ticks.y=element_blank(),\n        legend.position=\"none\",\n        plot.title=element_text(size=12),\n        axis.text=element_text(size=8),\n        axis.title=element_text(size=8)) +\n    ggtitle(paste0(isof, \" : SI = \",\n        round(mmParams[isof,\"SI\"],4))) +\n    xlab(expression(Log[2] *\"(TPM Reads)\")) +\n    stat_function(fun=\"dnorm\", colour=\"#F8766D\",\n        args=list(mean=mmParams[isof,\"n.mu.2\"],\n        sd=sqrt(mmParams[isof,\"n.var\"]))) +\n    stat_function(fun=\"dnorm\", colour=\"#F8766D\",\n        args=list(mean=mmParams[isof,\"n.mu.1\"],\n        sd=sqrt(mmParams[isof,\"n.var\"]))) +\n    stat_function(fun=\"dnorm\", colour=\"#00BFC4\",\n        args=list(mean=mmParams[isof,\"t.mu.2\"],\n        sd=sqrt(mmParams[isof,\"t.var\"]))) +\n    stat_function(fun=\"dnorm\", colour=\"#00BFC4\",\n        args=list(mean=mmParams[isof,\"t.mu.1\"],\n        sd=sqrt(mmParams[isof,\"t.var\"])))\n    print(p1)\n}\n\n\n#' Generate a scatter plot with the output from mixModelParams\n#'\n#' This function allows you to generate the parameters for two 2-component\n#' mixture models with equal variances\n#'\n#' @param mmParams The output from the mixModelParams function. Will utilize\n#' the deltaMu2 and deltaMu1 rows\n#' @param selIndThresh This is the selectivity index threshold to use. All\n#' genes with SI values above this threshold will be highlighted in purple.\n#' @param gene_labels A character vector of gene names used to label the\n#' genes with that name on the scatter plot.\n#' @keywords oncoMix, visualization, two-component\n#' @return Returns a ggplot scatter object that can be plotted\n#' @import ggplot2 ggrepel stats\n#' @importFrom RColorBrewer brewer.pal\n#' @export\n#' @examples\n#' dfNml <- as.data.frame(matrix(data=rgamma(n=150, shape=2, rate=2),\n#' nrow=15, ncol=10))\n#' rownames(dfNml) <- paste0(\"patient.n\", 1:nrow(dfNml))\n#' colnames(dfNml) <- paste0(\"gene\", 1:ncol(dfNml))\n#'\n#' dfTumor <- as.data.frame(matrix(data=rgamma(n=150, shape=4, rate=3),\n#' nrow=15, ncol=10))\n#' rownames(dfTumor) <- paste0(\"patient.t\", 1:nrow(dfTumor))\n#' colnames(dfTumor) <- paste0(\"gene\", 1:ncol(dfTumor))\n#'\n#' mmParams <- mixModelParams(dfNml, dfTumor)\n#' scatterMixPlot(mmParams)\n#' @seealso \\code{\\link{mixModelParams}}\n\nscatterMixPlot <- function(mmParams, selIndThresh=1, gene_labels=NULL){\n    mmParams <- as.data.frame(mmParams)\n    one_over_alpha <- diff(range(mmParams$deltaMu2))\n    alpha1 <- 1/one_over_alpha\n\n    quants <- c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles\n    colors_red <- RColorBrewer::brewer.pal(n=length(quants), name=\"Reds\")\n\n    deltaMu2Quant <- stats::quantile(mmParams[,\"deltaMu2\"], quants)\n    deltaMu1Quant <- stats::quantile(1/(abs(mmParams[,\"deltaMu1\"]) + alpha1),\n                        quants)\n    deltaMu2 <- deltaMu1 <- NULL\n    x <- ggplot(data=as.data.frame(mmParams),\n        aes(x=deltaMu2, y=1/(abs(deltaMu1) + alpha1))) +\n        theme_classic() +\n        geom_hline(yintercept=deltaMu1Quant,\n            col=colors_red, size=c(1,1,1,1,1)) +\n        geom_vline(xintercept=deltaMu2Quant,\n            col=colors_red, size=c(1,1,1,1,1)) +\n        geom_point(alpha=0.5) +\n        xlab(expression(paste(Delta, mu[2]))) +\n        ylab(expression(paste(frac(1, paste(Delta, mu[1], \" + \", alpha)))))\n    if(selIndThresh < 1){\n        mmParams.si <- mmParams[mmParams$SI > selIndThresh,]\n        x <- x + geom_point(data=as.data.frame(mmParams.si),\n            aes(x=deltaMu2, y=1/(abs(deltaMu1)+alpha1)),\n            size=10, alpha=0.1,\n            col=colors_red[length(colors_red)],\n            fill=colors_red[length(colors_red)]) +\n        ggtitle(bquote(Distribution~of~Mixture~Model~\n            Parameters*\",\"~alpha~\"=\"~.(round(alpha1,2))*\", SI >\"~\n            .(selIndThresh)))\n    } else if(!is.null(gene_labels)){\n        mmParams.si <- mmParams[gene_labels,]\n        mmParams.si$gene_labels <- gene_labels\n        x <- x + geom_point(data=as.data.frame(mmParams.si),\n            aes(x=deltaMu2, y=1/(abs(deltaMu1)+alpha1)),\n            size=10, alpha=0.1,\n            col=colors_red[length(colors_red)],\n            fill=colors_red[length(colors_red)]) +\n        ggrepel::geom_text_repel(data=mmParams.si, aes(x=deltaMu2,\n            y=1/(abs(deltaMu1)+alpha1)),\n            label=rownames(mmParams.si)) +\n        ggtitle(bquote(Distribution~of~Mixture~Model~\n            Parameters*\",\"~alpha~\"=\"~.(round(alpha1,2))))\n    } else {\n        x <- x + ggtitle(bquote(Distribution~of~Mixture~Model~\n            Parameters*\",\"~alpha~\"=\"~.(round(alpha1,2))))\n    }\n    return(x)\n}\n\n#' Identify genes that meet pre-specified quantiles\n#'\n#' This function allows you to subset genes that are above pre-specified\n#' quantiles and that most closely resemble the distribution of oncogenes.\n#'\n#' @param mmParams The output from the mixModelParams function.\n#' @param deltMu2Thresh The percentile threshold for the deltaMu2 statistic.\n#' All genes exceeding this percentile threshold will be selected.\n#' @param deltMu1Thresh The percentile threshold for the deltaMu1 statistic.\n#' All genes exceeding this percentile threshold will be selected.\n#' @param siThresh The threshold for the selectivity index statistic\n#' (between 0-1). All genes exceeding this threshold will be selected.\n#' @keywords subsetting\n#' @return Returns a dataframe containing all genes meeting the prespecified\n#' thresholds.\n#' @import ggplot2 ggrepel stats\n#' @export\n#' @examples\n#' dfNml <- as.data.frame(matrix(data=rgamma(n=150, shape=2, rate=2),\n#' nrow=15, ncol=10))\n#' rownames(dfNml) <- paste0(\"patient_n\", 1:nrow(dfNml))\n#' colnames(dfNml) <- paste0(\"gene\", 1:ncol(dfNml))\n#'\n#' dfTumor <- as.data.frame(matrix(data=rgamma(n=150, shape=4, rate=3),\n#' nrow=15, ncol=10))\n#' rownames(dfTumor) <- paste0(\"patient_t\", 1:nrow(dfTumor))\n#' colnames(dfTumor) <- paste0(\"gene\", 1:ncol(dfTumor))\n#'\n#' mmParams <- mixModelParams(dfNml, dfTumor)\n#' topGeneQuants(mmParams)\n#' @seealso \\code{\\link{mixModelParams}}\n\ntopGeneQuants <- function(mmParams, deltMu2Thresh=90,\n        deltMu1Thresh=10, siThresh=.99){\n    mmParams.df <- as.data.frame(mmParams)\n    deltaMu2Quant <- stats::quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)\n    deltaMu1Quant <- stats::quantile(abs(mmParams.df$deltaMu1),\n        {100-deltMu1Thresh}*.01)\n    mmParams.df <- as.data.frame(mmParams)\n    tfVect <- mmParams.df$deltaMu2 > deltaMu2Quant &\n        abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh\n    mmParams.df.quantSubset <- mmParams.df[tfVect,]\n    return(mmParams.df.quantSubset)\n}\n\n\n#' Human Breast Cancer RNA-sequencing data from TCGA - Tumor Tissue\n#'\n#' @name dfTumorIsof\n#' @docType data\n#' @author Daniel Pique \\email{daniel.pique@med.einstein.yu.edu}\n#' @references \\url{https://gdc.cancer.gov/}\n#' @keywords data\n\nNULL\n\n\n#' Human Breast Cancer RNA-sequencing data from TCGA - Adjacent Normal Tissue\n#'\n#' @name dfNmlIsof\n#' @docType data\n#' @author Daniel Pique \\email{daniel.pique@med.einstein.yu.edu}\n#' @references \\url{https://gdc.cancer.gov/}\n#' @keywords data\n\nNULL\n",
    "created" : 1505346469913.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3217790434",
    "id" : "B24EC4A3",
    "lastKnownWriteTime" : 1505350107,
    "last_content_update" : 1505350107927,
    "path" : "//data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix/R/oncoMix_two_component_mixture_models.R",
    "project_path" : "R/oncoMix_two_component_mixture_models.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}