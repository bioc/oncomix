return(y) })
params_matchedNormal
z$parameters$mean
z
params_matchedNormal
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(y$parameters$mean, y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(y$parameters$mean, y$parameters$variance$sigmasq)
return(class(z)) })
params_matchedNormal
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(y$parameters$mean, y$parameters$variance$sigmasq)
return(length(z)) })
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(y$parameters$mean, y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(y$parameters$mean, sigmaSq = y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(c(mu1,mu2) = y$parameters$mean, sigmaSq = y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(mu1,mu2 = y$parameters$mean, sigmaSq = y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(c("mu1","mu2") = y$parameters$mean, sigmaSq = y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(mu1 = y$parameters$mean, sigmaSq = y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal
params_matchedNormal <- apply(dfNml,2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(mu = y$parameters$mean, sigmaSq = y$parameters$variance$sigmasq)
return(z) })
params_matchedNormal
getwd()
setwd("\\\\data.einstein.yu.edu/home/dpique/")
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncoMix1/")
document()
devtools::install("dpique/oncoMix1")
devtools::install("dpique\oncoMix1")
devtools::install_github("dpique/oncoMix1")
ls()
document()
devtools::install_github("dpique/oncoMix1")
library(oncoMix)
?getMixModelParams
dfNml = as.data.frame(matrix(data = rgamma(n = 150, shape = 2, rate = 2), nrow = 15, ncol = 10))
rownames(dfNml) = paste0("patient", 1:nrow(dfNml))
colnames(dfNml) = paste0("gene", 1:ncol(dfNml))
dfTumor = as.data.frame(matrix(data = rgamma(n = 150, shape = 4, rate = 3), nrow = 15, ncol = 10))
rownames(dfTumor) = paste0("patient", 1:nrow(dfTumor))
colnames(dfTumor) = paste0("gene", 1:ncol(dfTumor))
mixModelParams = getMixModelParams(dfNml, dfTumor)
getMixModelParams
dfNml = as.data.frame(matrix(data = rgamma(n = 150, shape = 2, rate = 2), nrow = 15, ncol = 10))
rownames(dfNml) = paste0("patient", 1:nrow(dfNml))
colnames(dfNml) = paste0("gene", 1:ncol(dfNml))
dfTumor = as.data.frame(matrix(data = rgamma(n = 150, shape = 4, rate = 3), nrow = 15, ncol = 10))
rownames(dfTumor) = paste0("patient", 1:nrow(dfTumor))
colnames(dfTumor) = paste0("gene", 1:ncol(dfTumor))
mixModelParams = oncoMix::getMixModelParams(dfNml, dfTumor)
mixModelParams
devtools::install_
github("dpique/oncoMix1")
ls
getwd()
install("../oncoMix1")
install("../oncoMix1")
install("../oncoMix1")
getwd()
document()
document()
install("../oncoMix1")
library(oncoMix)
?scatterMix
document()
document()
install("../oncoMix1")
?scatterMix
library(oncoMix)
?scatterMix
rownames(dfNml) = paste0("patient", 1:nrow(dfNml))
colnames(dfNml) = paste0("gene", 1:ncol(dfNml))
dfTumor = as.data.frame(matrix(data = rgamma(n = 150, shape = 4, rate = 3), nrow = 15, ncol = 10))
rownames(dfTumor) = paste0("patient", 1:nrow(dfTumor))
colnames(dfTumor) = paste0("gene", 1:ncol(dfTumor))
mmParams = mixModelParams(dfNml, dfTumor)
mixModelParams
mixModelParams
?mixModelParams
?oncoMix::mixModelParams
mmParams
y
rownames(dfNml) = paste0("patient", 1:nrow(dfNml))
colnames(dfNml) = paste0("gene", 1:ncol(dfNml))
dfTumor = as.data.frame(matrix(data = rgamma(n = 150, shape = 4, rate = 3), nrow = 15, ncol = 10))
rownames(dfTumor) = paste0("patient", 1:nrow(dfTumor))
colnames(dfTumor) = paste0("gene", 1:ncol(dfTumor))
params_normal <- apply(dfNml, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(n.mu = y$parameters$mean, n.var = y$parameters$variance$sigmasq, n.pi = )
return(z) })
params_normal <- apply(dfNml, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(n.mu = y$parameters$mean, n.var = y$parameters$variance$sigmasq, n.pi = y$parameters$pi)
return(z) })
params_normal
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
y <- mclust::Mclust(data = dfNml[,1], G=2, modelNames = "E")
y
y$parameters$pro
sum(y$parameters$pro)
params_normal <- apply(dfNml, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(n.mu = y$parameters$mean, n.var = y$parameters$variance$sigmasq, n.pi = y$parameters$pro[1])
return(z) })
params_normal
params_tumor <- apply(dfTumor, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(t.mu = y$parameters$mean, t.var = y$parameters$variance$sigmasq)
return(z) })
params_tumor
params_tumor <- apply(dfTumor, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(t.mu = y$parameters$mean, t.var = y$parameters$variance$sigmasq, t.pi = n.pi = y$parameters$pro[1])
return(z) })
z <- c(t.mu = y$parameters$mean, t.var = y$parameters$variance$sigmasq, t.pi = y$parameters$pro[1])
params_tumor <- apply(dfTumor, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(t.mu = y$parameters$mean, t.var = y$parameters$variance$sigmasq, t.pi = y$parameters$pro[1])
return(z) })
params_tumor
params = rbind(params_normal, params_tumor)
params
deltaMu2 = params["t.mu.2",] - params["n.mu.2",]
deltaMu1 = params["t.mu.1",] - params["n.mu.1",]
deltaMu2
params = rbind(params, deltaMu2, deltaMu1)
params
document()
install_git("dpique/oncoMix1")
install_github("dpique/oncoMix1")
library(oncoMix)
?oncoMix::mixModelParams
?oncoMix::scatterMix
?oncoMix::scatterMix
?oncoMix::mixModelParams
?scatterMix
mixModelParams = function(dfNml, dfTumor) {
y <- mclust::Mclust(data = dfNml[,1], G=2, modelNames = "E")
params_normal <- apply(dfNml, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(n.mu = y$parameters$mean, n.var = y$parameters$variance$sigmasq, n.pi.1 = y$parameters$pro[1])
return(z) })
params_tumor <- apply(dfTumor, 2, function(x) {
y <- mclust::Mclust(data = x, G=2, modelNames = "E")
z <- c(t.mu = y$parameters$mean, t.var = y$parameters$variance$sigmasq, t.pi.1 = y$parameters$pro[1])
return(z) })
params = rbind(params_normal, params_tumor)
deltaMu2 = params["t.mu.2",] - params["n.mu.2",]
deltaMu1 = params["t.mu.1",] - params["n.mu.1",]
params = rbind(params, deltaMu2, deltaMu1)
return(params)
}
mmParams = mixModelParams(dfNml, dfTumor)
mmParams
boundaryTumor <- mixModelParams["t.mu.2",] - mixModelParams["t.mu.1",]
mixModelParams
boundaryTumor <- mmParams["t.mu.2",] - mmParams["t.mu.1",]
boundaryTumor
dim(dfNml)
dfNml
boundaryTumor > dfNml
boundaryTumor
dfNml
dfNml < boundaryTumor #< dfNml
boundaryTumor
dfNml
boundaryTumor <- mmParams["t.mu.2",] - mmParams["t.mu.1",] #this is the boundary between the
#tumor samples (classified into hi and low expression)
#How many normal samples are below this threshold?
selInd = colSums(dfNml < boundaryTumor)
selInd
selInd = colSums(dfNml < boundaryTumor) / nrow(dfNml)
selInd
selInd
getwd()
document()
document()
install_github("dpique/oncoMix1")
rm(mixModelParams)
mixModelParams
?mixModelParams
?scatterMix
?selectivityIndex
str_c(c("x", "y", "z"), collapse = ", ")
library(tidyverse)
library(stringr)
install.packages("tidyverse")
getwd()
setwd("~")
getwd()
install.packages("tidyverse")
library(tidyverse)
install.packages("readr")
devtools::install_github("tidyverse/readr")
devtools::install_github("tidyverse/readr")
install.packages("https://cran.r-project.org/src/contrib/readr_1.1.1.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/readr_1.1.0.tar.gz")
library(Rcpp)
library(stringr)
library(stringr)
x <- "\u00b5"
x
?"'"
c("one", "two", "three")
str_length(c("a", "R for data science", NA))
str_length(c("a", "R for dataaaa science", NA))
x <- c("apple", "eggplant", "banana")
str_sort(x, locale = "en")  # English
str_sort(x, locale = "haw") # Hawaiian
str_sort(x, locale = "rus") # Hawaiian
str_sort(x, locale = "es") # Hawaiian
str_sort(x, locale = "fr") # Hawaiian
str_sort(x, locale = "gr") # Hawaiian
str_sort(x, locale = "bffe") # Hawaiian
str_sort(x, locale = "wefaer24r") # Hawaiian
?str_sort
?str_wrap
thanks_path <- file.path(R.home("doc"), "THANKS")
thanks <- str_c(readLines(thanks_path), collapse = "\n")
thanks <- word(thanks, 1, 3, fixed("\n\n"))
thanks
x <- c("apple", "banana", "pear")
str_view(x, "an")
str_view(x, ".a.")
dot <- "\\."
dot
writeLines(dot)
print(writeLines(dot)
)
print(dot)
?writeLines
str_view(x, "an")
str_view("\", "\")
str_view("\", "\")
str_view("\", "\\")
str_view("\", "\\\")
str_view("\\", "\\\")
""
)
)
str_view(""'\", "\"\'\\\\")
str_view(""'\"", "\"\'\\\\")
str_view(""'\"", "\"\'\\\\")
str_view("\"\'\"", "\"\'\\\\")
str_view("\"\'\"", "\"\'\\\\")
str_view("\"\'\\\\", "\"\'\\\\")
?str_view
str_view(".5.r.7","\..\..\..")
str_view("\.5\.r\.7","\..\..\..")
str_view("\.5\.r\.7","\..\..\..")
str_view("\.5\.r\.7", "\.\..\..")
str_view("\.5\.r\.7", "\\..\..")
str_view("\\.5\.r\.7", "\..\..\..")
str_view("\\.5\\.r\\.7", "\..\..\..")
str_view(".5.r.7", "\..\..\..")
str_view("\"\'\\\\", "\"\'\\\\")
str_view("\..\..\..", "\..\..\..")
str_view("......", "\..\..\..")
str_view("34gert", "\..\..\..")
str_view("34gert", "\4.\..\..")
x <- c("apple", "banana", "pear")
str_view(x, "^a")
str_view(c("grey", "gray", "groy"), "gr(e|a)y")
str_view(c("grey", "gray", "groy"), "gr(e|a|o)y")
str_view(c("grey", "gray", "groy"), "gr(e|a|O)y")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
str_view(x, "CC?")
str_view(x, "C?")
str_view(x, "CCC?")
x <- "1888 is the longest year in Roman numerals: MDCCCCCCCcCLXXXVIII"
str_view(x, "CCC?")
str_view(x, "CCC+")
str_view(x, "CCC[LX]+")
str_view(x, 'C[LX]+')
str_view(x, 'C[LLX]+')
str_view(x, 'C[LLLX]+')
str_view(x, 'C[LLLXV]+')
str_view(x, 'C[LLLXcV]+')
str_view_all(x, 'C[LLLXcV]+')
getwd()
remove.packages("oncomix")
remove.packages("oncoMix")
remove.packages("oncoMix1")
library(devtools)
install_github("dpique/oncomic")
install_github("dpique/oncomix")
library(oncomix)
scatterMixPlot
getwd()
setwd("")
mixModelParams
scatterMixPlot
setwd("\\\\data.einstein.yu.edu/home/dpique")
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga")
document("oncomix")
scatterMixPlot
library(oncomix)
oncomix::scatterMixPlot()
oncomix::scatterMixPlot
devtools::install_github("dpique/oncomix")
knitr::opts_chunk$set(echo = TRUE)
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga")
install.packages("oncomix")
install.packages("oncomix")
oncomix::scatterMixPlot()
oncomix::scatterMixPlot
knitr::opts_chunk$set(echo = TRUE)
remove.packages("oncomix")
knitr::opts_chunk$set(echo = TRUE)
library(devtools)
install_github("oncomix")
install_github("dpique/oncomix")
vignette(oncomix)
vignette("oncomix_vignette")
scatterMixPlot
library(oncomix)
scatterMixPlot
head(mixModelParams)
data(dfNmlIsof, dfTumorIsof, package="oncomix")
dim(dfNmlIsof)
dfNmlIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from adjacent normal samples
dim(dfTumorIsof)
dfTumorIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from tumors
mmParams = mixModelParams(dfNmlIsof, dfTumorIsof) #will take a few mins
head(mmParams)
scatterMixPlot <- function(mixModelParams, selIndThresh = 1){
mixModelParams = as.data.frame(mixModelParams)
one_over_alpha = diff(range(mixModelParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mixModelParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mixModelParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mixModelParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha))))) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
#print(x)
if(selIndThresh < 1){
mixModelParams.si = mixModelParams[mixModelParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mixModelParams.si), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)), size = 10, alpha=0.5, col=colors_red[length(colors_red)], fill=colors_red[length(colors_red)])
}
return(x)
}
scatterMixPlot(mmParams, selIndThresh = .99)
library(ggplot2)
scatterMixPlot(mmParams, selIndThresh = .99)
scatterMixPlot <- function(mixModelParams, selIndThresh = 1){
mixModelParams = as.data.frame(mixModelParams)
one_over_alpha = diff(range(mixModelParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mixModelParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mixModelParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mixModelParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha))))) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
#print(x)
if(selIndThresh < 1){
mixModelParams.si = mixModelParams[mixModelParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mixModelParams.si), aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)), size = 10, alpha=0.1, col=colors_red[length(colors_red)], fill=colors_red[length(colors_red)])
}
return(x)
}
scatterMixPlot(mmParams, selIndThresh = .99)
scatterMixPlot <- function(mixModelParams, selIndThresh = 1){
mixModelParams = as.data.frame(mixModelParams)
one_over_alpha = diff(range(mixModelParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mixModelParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mixModelParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mixModelParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mixModelParams.si = mixModelParams[mixModelParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mixModelParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI > "~.(selIndThresh)))
} else {
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams, selIndThresh = .99)
scatterMixPlot(mmParams)
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("01_hello")
runExample("03_reactivity")
knitr::opts_chunk$set(echo = TRUE)
require(xlsx)
install.packages("xlsx")
getwd()
setwd("C:/")
setwd("C:/Users/Daniel/Desktop/single cell/SOX10_12-05-17/SOX10_12-05-17/")
sox10_pos = read.csv("gene-expression-SOX10+.csv")
sox10_neg = read.csv("gene-expression-SOX10-.csv", header = T)
dim(sox10_pos)
sox10_pos[1:5, 1:5]
range(sox10_pos)
length(as.numeric(sox10_pos))
class(sox10_pos)
class(sox10_pos$X)
class(sox10_pos$NN32_A1)
sox10_pos[1:5, 1:5]
sox10_pos = read.csv("gene-expression-SOX10+.csv", header = T, row.names = 1)
sox10_neg = read.csv("gene-expression-SOX10-.csv", header = T, row.names = 1)
sox10_pos[1:5, 1:5]
range(sox10_pos)
range(sox10_neg)
hist(sox10_pos)
boxplot(sox10_pos)
boxplot(t(sox10_pos))
sox10_pos = t(sox10_pos)
sox10_pos = t(sox10_pos)
sox10_neg = t(sox10_neg)
boxplot(sox10_pos)
boxplot(sox10_neg)
sox10_neg[1:5, 1:5]
prin_comp <- prcomp(sox10_pos, scale. = T)
sox10_pos_pca <- prcomp(sox10_pos, scale. = T)
sox10_neg_pca <- prcomp(sox10_neg, scale. = T)
boxplot(sox10_pos)
dim(sox10_pos)
dim(sox10_neg)
i = intersect(rownames(sox10_pos), colnames(sox10_neg))
boxplot(sox10_neg)
i = intersect(rownames(sox10_pos), colnames(sox10_neg))
length(i)
sox10_pos = read.csv("gene-expression-SOX10+.csv", header = T, row.names = 1)
sox10_neg = read.csv("gene-expression-SOX10-.csv", header = T, row.names = 1)
dim(sox10_pos)
dim(sox10_neg)
sox10_pos = t(sox10_pos)
sox10_neg = t(sox10_neg)
sox10_pos_pca <- prcomp(sox10_pos, scale. = T)
sox10_neg_pca <- prcomp(sox10_neg, scale. = T)
dim(sox10_pos)
dim(sox10_neg)
boxplot(sox10_pos)
boxplot(sox10_neg)
density(plot(sox10_pos))
density(plot(as.numeric(sox10_pos)))
sox10_pos.m = reshape2::melt(sox10_pos)
getwd()
devtools::build_vignettes("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga")
devtools::build_vignettes("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix")
rmarkdown::render()
rmarkdown::render("../../../marLab/bayesianStats/gelman_bda/1_gelman_bda.Rmd")
rmarkdown::render("../../../marLab/bayesianStats/gelman_bda/1_gelman_bda.Rmd")
rmarkdown::render("../../../marLab/bayesianStats/gelman_bda/1_gelman_bda.Rmd")
sys.date
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga")
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix")
devtools::build()
devtools::build()
devtools::build(../)
devtools::build("oncomix")
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix")
devtools::build()
