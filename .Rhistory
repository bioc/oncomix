return(x)
}
scatterMixPlot(mmParams, selIndThresh = .99)
scatterMixPlot <- function(mixModelParams, selIndThresh = 1){
mixModelParams = as.data.frame(mixModelParams)
one_over_alpha = diff(range(mixModelParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mixModelParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mixModelParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mixModelParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mixModelParams.si = mixModelParams[mixModelParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mixModelParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI > "~.(selIndThresh)))
} else {
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams, selIndThresh = .99)
scatterMixPlot(mmParams)
library(shiny)
runExample("01_hello")
runExample("02_text")
runExample("01_hello")
runExample("03_reactivity")
knitr::opts_chunk$set(echo = TRUE)
require(xlsx)
install.packages("xlsx")
getwd()
setwd("C:/")
setwd("C:/Users/Daniel/Desktop/single cell/SOX10_12-05-17/SOX10_12-05-17/")
sox10_pos = read.csv("gene-expression-SOX10+.csv")
sox10_neg = read.csv("gene-expression-SOX10-.csv", header = T)
dim(sox10_pos)
sox10_pos[1:5, 1:5]
range(sox10_pos)
length(as.numeric(sox10_pos))
class(sox10_pos)
class(sox10_pos$X)
class(sox10_pos$NN32_A1)
sox10_pos[1:5, 1:5]
sox10_pos = read.csv("gene-expression-SOX10+.csv", header = T, row.names = 1)
sox10_neg = read.csv("gene-expression-SOX10-.csv", header = T, row.names = 1)
sox10_pos[1:5, 1:5]
range(sox10_pos)
range(sox10_neg)
hist(sox10_pos)
boxplot(sox10_pos)
boxplot(t(sox10_pos))
sox10_pos = t(sox10_pos)
sox10_pos = t(sox10_pos)
sox10_neg = t(sox10_neg)
boxplot(sox10_pos)
boxplot(sox10_neg)
sox10_neg[1:5, 1:5]
prin_comp <- prcomp(sox10_pos, scale. = T)
sox10_pos_pca <- prcomp(sox10_pos, scale. = T)
sox10_neg_pca <- prcomp(sox10_neg, scale. = T)
boxplot(sox10_pos)
dim(sox10_pos)
dim(sox10_neg)
i = intersect(rownames(sox10_pos), colnames(sox10_neg))
boxplot(sox10_neg)
i = intersect(rownames(sox10_pos), colnames(sox10_neg))
length(i)
sox10_pos = read.csv("gene-expression-SOX10+.csv", header = T, row.names = 1)
sox10_neg = read.csv("gene-expression-SOX10-.csv", header = T, row.names = 1)
dim(sox10_pos)
dim(sox10_neg)
sox10_pos = t(sox10_pos)
sox10_neg = t(sox10_neg)
sox10_pos_pca <- prcomp(sox10_pos, scale. = T)
sox10_neg_pca <- prcomp(sox10_neg, scale. = T)
dim(sox10_pos)
dim(sox10_neg)
boxplot(sox10_pos)
boxplot(sox10_neg)
density(plot(sox10_pos))
density(plot(as.numeric(sox10_pos)))
sox10_pos.m = reshape2::melt(sox10_pos)
getwd()
devtools::build_vignettes("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga")
devtools::build_vignettes("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix")
rmarkdown::render()
rmarkdown::render("../../../marLab/bayesianStats/gelman_bda/1_gelman_bda.Rmd")
rmarkdown::render("../../../marLab/bayesianStats/gelman_bda/1_gelman_bda.Rmd")
rmarkdown::render("../../../marLab/bayesianStats/gelman_bda/1_gelman_bda.Rmd")
sys.date
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga")
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix")
devtools::build()
devtools::build()
devtools::build(../)
devtools::build("oncomix")
setwd("\\\\data.einstein.yu.edu/home/dpique/dpLabNotebook/bimodality_brca_tcga/oncomix")
devtools::build()
devtools::install_github("dpique/oncomix")
R.Version()
install.packages("rlang")
devtools::install_github("dpique/oncomix")
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
#devtools::install_github("dpique/oncomix")
library(oncomix)
library(ggplot2)
oncomix::oncoMixIdeal()
data(dfNmlIsof, dfTumorIsof, package="oncomix")
dim(dfNmlIsof)
dfNmlIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from adjacent normal samples
dim(dfTumorIsof)
dfTumorIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from tumors
mmParams = oncomix::mixModelParams(dfNmlIsof, dfTumorIsof) #fits the mixture models, will take a few mins
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
#devtools::install_github("dpique/oncomix")
library(oncomix)
library(ggplot2)
oncomix::oncoMixIdeal()
data(dfNmlIsof, dfTumorIsof, package="oncomix")
dim(dfNmlIsof)
dfNmlIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from adjacent normal samples
dim(dfTumorIsof)
dfTumorIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from tumors
mmParams = oncomix::mixModelParams(dfNmlIsof[1:100, 1:100], dfTumorIsof[1:100, 1:100]) #fits the mixture models, will take a few mins
mmParams = oncomix::mixModelParams(dfNmlIsof[1:100, 1:100], dfTumorIsof[1:100, 1:100]) #fits the mixture models, will take a few mins
head(mmParams)
scatterMixPlot(mmParams, selIndThresh = .99)
library(ggplot2)
qplot(mmParams[,"SI"]) + theme_classic() + xlab("Selectivity Index")
topGeneQuants = function(mmParams, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99){
#these are quantiles
quantile(abs(mmParams.df$deltaMu1), .1)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), deltMu1Thresh*.01)
#siQuant = quantile(mmParams.df$SI, siThresh)
mmParams.df = as.data.frame(mmParams)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant #& mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
}
topGeneQuants
topGeneQuants(mmParams.df)
mmParams.df = as.data.frame(mmParams)
topGeneQuants(mmParams.df)
topGeneQuants(mmParams.df)
topGeneQuants = function(mmParams, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99){
#these are quantiles
quantile(abs(mmParams.df$deltaMu1), .1)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), deltMu1Thresh*.01)
#siQuant = quantile(mmParams.df$SI, siThresh)
mmParams.df = as.data.frame(mmParams)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant #& mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
return(mmParams.df.quantSubset)
}
topGeneQuants(mmParams.df)
topGeneQuants(mmParams.df, deltMu2Thresh = 50, deltMu1Thresh = 50, siThresh = .85)
topGeneTable(mmParams.df, returnScore = T)
topGeneTable = function(mmParams, N=nrow(mmParams), returnScore=T){
#returns the top N genes based on a score
mmParams.df = as.data.frame(mmParams)
mmParams.df$score = mmParams.df$SI*{(mmParams.df$deltaMu2 -  mmParams.df$deltaMu1) - (mmParams.df$n.var + mmParams.df$t.var)}
mmParams.df.s = mmParams.df[with(mmParams.df, order(-score)), ]
mmParams.df.s.subset = mmParams.df.s[N,]
return(mmParams.df.s.subset)
}
topGeneTable(mmParams.df, returnScore = T)
topGeneTable = function(mmParams, N=nrow(mmParams), returnScore=T){
#returns the top N genes based on a score
mmParams.df = as.data.frame(mmParams)
mmParams.df$score = mmParams.df$SI*{(mmParams.df$deltaMu2 -  mmParams.df$deltaMu1) - (mmParams.df$n.var + mmParams.df$t.var)}
mmParams.df.s = mmParams.df[with(mmParams.df, order(-score)), ]
mmParams.df.s.subset = mmParams.df.s[1:N,]
return(mmParams.df.s.subset)
}
topGeneTbl = topGeneTable(mmParams.df, returnScore = T)
topGeneTbl = topGeneTable(mmParams.df, returnScore = T)
dim(topGeneTbl)
head(topGeneTbl)
build_vignettes()
devtools::build_vignettes()
getwd()
document()
devtools::document()
setwd("..")
install("oncomix")
devtools::install("oncomix")
library(oncomix)
build_vignettes(pkg = "oncomix/")
devtools::build_vignettes(pkg = "oncomix/")
getwd()
setwd("./oncomix")
devtools::build_vignettes()
install("../cats")
devtools::install("../cats")
devtools::install("../oncomix")
vignette(oncomix)
vignette(oncomix_vignette)
vignette("oncomix_vignette")
mclust::Mclust(data = dfNml[1,], G=2, modelNames = "E")
mclust::Mclust(data = dfNmlIsof[1,], G=2, modelNames = "E")
library(mclust)
mclust::Mclust(data = dfNmlIsof[1,], G=2, modelNames = "E")
mclust::Mclust(data = dfNmlIsof[1,], G=2, modelNames = "E", verbose = F)
getwd()
library(devtools)
document()
build_vignettes(); install("../oncomix")
library(oncomix)
vignette("oncomix_vignette")
clean_vignettes(pkg = ".")
build_vignettes()
document()
uninstall.packages("oncomix")
remove.packages("oncomix")
install_github("dpique/oncomix")
library(oncomix)
vignette("oncomix")
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
geom_text() +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams = mmParams, gene_labels = rownames(topGeneTbl))
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
geom_text(aes(label = rownames(mmParams.si)) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
geom_text(aes(label = rownames(mmParams.si))) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams = mmParams, gene_labels = rownames(topGeneTbl))
rownames(topGeneTbl)
library(ggrepel)
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
geom_text_repel(data = mmParams.si, aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
label = rownames(mmParams.si)) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams = mmParams, gene_labels = rownames(topGeneTbl))
getwd()
build_vignettes()
document()
install("../oncomix"); library(oncomix); build_vignettes()
vignette("oncomix")
remove.packages("oncomix")
install("oncomix")
install("../oncomix")
document()
vignette("oncomix")
build_vignettes()
install("../oncomix")
vignette("oncomix")
remove.packages("oncomix")
install_github("dpique/oncomix")
vignette("oncomix")
topGeneQuant = oncomix::topGeneQuants(mmParams.df, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99) #need to fix this function
dim(topGeneQuant)
topGeneQuant = oncomix::topGeneQuants(mmParams.df, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .90) #need to fix this function
dim(topGeneQuant)
topGeneQuant
mmParams.df = as.data.frame(mmParams)
quantile(abs(mmParams.df$deltaMu1), .1)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltMu2Thresh = 90
deltMu1Thresh = 10
siThresh = .99
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), deltMu1Thresh*.01)
deltaMu2Quant
deltaMu1Quant
range(mmParams.df$deltaMu2)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, .95)
deltaMu2Quant
deltaMu2Quant = quantile(mmParams.df$deltaMu2, .99)
deltaMu2Quant
topGeneQuant = oncomix::topGeneQuants(mmParams.df, deltMu2Thresh = 99, deltMu1Thresh = 10, siThresh = .99) #need to fix this function
topGeneQuant
deltaMu2Quant = quantile(mmParams.df$deltaMu2, 99*.01)
deltaMu2Quant
sum(mmParams.df$deltaMu2 > deltaMu2Quant)
sum(abs(mmParams.df$deltaMu1) < deltaMu1Quant)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), {1-deltMu1Thresh}*.01)
deltaMu1Quant
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), {100-deltMu1Thresh}*.01)
deltaMu1Quant
topGeneQuants = function(mmParams, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99){
mmParams.df = as.data.frame(mmParams)
#quantile(abs(mmParams.df$deltaMu1), .1)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), {100-deltMu1Thresh}*.01)
siQuant = quantile(mmParams.df$SI, siThresh)
mmParams.df = as.data.frame(mmParams)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
return(mmParams.df.quantSubset)
}
topGeneQuant = oncomix::topGeneQuants(mmParams.df, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99) #need to fix this function
topGeneQuant
sum( mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant )
siQuant = quantile(mmParams.df$SI, siThresh)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
tfVect
sum(tfVect)
mmParams.df.quantSubset = mmParams.df[tfVect,]
mmParams.df.quantSubset
topGeneQuants = function(mmParams, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99){
mmParams.df = as.data.frame(mmParams)
#quantile(abs(mmParams.df$deltaMu1), .1)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), {100-deltMu1Thresh}*.01)
#siQuant = quantile(mmParams.df$SI, siThresh)
mmParams.df = as.data.frame(mmParams)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
return(mmParams.df.quantSubset)
}
topGeneQuant = oncomix::topGeneQuants(mmParams.df, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99) #need to fix this function
print(topGeneQuant)
topGeneQuant = topGeneQuants(mmParams.df, deltMu2Thresh = 90, deltMu1Thresh = 10, siThresh = .99) #need to fix this function
print(topGeneQuant)
dim(mmParams.df)
mmParams.df = as.data.frame(mmParams)
#quantile(abs(mmParams.df$deltaMu1), .1)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), {100-deltMu1Thresh}*.01)
#siQuant = quantile(mmParams.df$SI, siThresh)
mmParams.df = as.data.frame(mmParams)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
mmParams.df.quantSubset
siThresh = .99
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), deltMu1Thresh*.01)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
dim(  tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
)
dim(mmParams.df.quantSubset)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, deltMu2Thresh*.01)
deltaMu2Quant = quantile(mmParams.df$deltaMu2, 99*.01)
deltaMu1Quant = quantile(abs(mmParams.df$deltaMu1), {100-deltMu1Thresh}*.01)
mmParams.df = as.data.frame(mmParams)
tfVect = mmParams.df$deltaMu2 > deltaMu2Quant & abs(mmParams.df$deltaMu1) < deltaMu1Quant & mmParams.df$SI > siThresh
mmParams.df.quantSubset = mmParams.df[tfVect,]
mmParams.df.quantSubset
document()
citation('DESeq')
install()
library(oncomix)
library(oncomix)
build_vignettes()
document()
install()
vignette("oncomix")
build_vignettes()
install()
build_vignettes(); install()
vignette("oncomix")
