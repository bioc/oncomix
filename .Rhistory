dfNmlIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from adjacent normal samples
dim(dfTumorIsof)
dfTumorIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from tumors
mmParams = oncomix::mixModelParams(dfNmlIsof, dfTumorIsof) #fits the mixture models, will take a few mins
devtools::install_github("dpique/oncomix")
build_vignettes()
library(devtools)
build_vignettes()
build_vignettes()
build_vignettes()
build_vignettes()
install_github("dpique/oncomix")
library(oncomix)
vignette("oncomix")
build_vignettes()
mixModelParams
build_vignettes()
build_vignettes()
install_github("dpique/oncomix")
library(oncomix)
vignette("oncomix")
vignette(oncomix)
vignette("oncomix")
library(devtools)
build_vignettes()
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
#devtools::install_github("dpique/oncomix")
library(oncomix)
library(ggplot2)
oncomix::oncoMixIdeal()
data(dfNmlIsof, dfTumorIsof, package="oncomix")
dim(dfNmlIsof)
dfNmlIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from adjacent normal samples
dim(dfTumorIsof)
dfTumorIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from tumors
mmParams = oncomix::mixModelParams(dfNmlIsof, dfTumorIsof) #fits the mixture models, will take a few minutes
head(mmParams)
topGeneQuant = oncomix::topGeneQuants(mmParams, deltMu2Thresh = 99, deltMu1Thresh = 10, siThresh = .99)
print(topGeneQuant)
mmParams.top10 = mmParams[1:10,]
print(mmParams.top10)
isof = "uc002jxc.2"
plotGeneHist(mmParams, dfNmlIsof, dfTumorIsof, isof)
scatterMixPlot(mmParams)
scatterMixPlot(mmParams, selIndThresh = .99)
scatterMixPlot(mmParams = mmParams, gene_labels = rownames(mmParams.top10))
#install.packages("RMySQL")
library(RMySQL)
#read in a table of known human oncogenes from the ONGene database
ongene = read.table("http://ongene.bioinfo-minzhao.org/ongene_human.txt", header = T, sep = "\t")
#send a sql query to UCSC to map the human oncogenes to ucsc isoform ids
ucsc_genome <- dbConnect(MySQL(), user="genome",
host="genome-mysql.cse.ucsc.edu", db = 'hg19')
createGeneQuery = function(name){ #name is a character vector
p1 = paste(name, collapse = '\',\'')
p2 = paste('(\'',p1, '\')',sep ="")
return(p2)
}
gene_q = createGeneQuery(ongene$OncogeneName)
query_res = dbGetQuery(ucsc_genome, paste0("SELECT kgID, geneSymbol FROM kgXref WHERE geneSymbol IN ", gene_q, " ;"))
dbDisconnect(ucsc_genome)
#Merge the query_res & mmParams dataframes
query_res$kgID.s = substr(query_res$kgID, 1,8)
mmParams$kgID.s = substr(rownames(mmParams), 1,8)
mmParams$kgID = rownames(mmParams)
mmParams.m = merge(mmParams, query_res, by = "kgID.s", all.x = T)
rownames(mmParams.m) = mmParams.m$kgID.x
# Show the top 5 isoforms with the highest score
#in our dataset that map to known oncogenes
mmParams.m = mmParams.m[with(mmParams.m, order(-score)), ]
mmParams.m.s = subset(mmParams.m, !is.na(geneSymbol))[1:5,]
print(mmParams.m.s)
scatterMixPlot(mmParams = mmParams, gene_labels = rownames(mmParams.m.s))
library(ggplot2)
library(RColorBrewer)
col = brewer.pal(3, "Dark2")
ggplot(mmParams.m, aes(x = score, y = ..density.., fill=is.na(geneSymbol))) +
geom_histogram(data=subset(mmParams.m, is.na(geneSymbol)), fill = col[2], alpha = 0.5)+
geom_histogram(data=subset(mmParams.m, !is.na(geneSymbol)), fill = col[3], alpha = 0.5)+ theme_classic() + xlab("OncoMix Score")+ theme_classic()
sessionInfo()
devtools::build_vignettes(pkg = "oncomix")
devtools::build_vignettes()
devtools::build_vignettes()
document()
library(devtools)
document()
test()
test()
check()
biocLite("oncomix")
source("https://bioconductor.org/biocLite.R")
biocLite("oncomix")
biocLite("oncomix")
build_vignettes()
document()
build_vignettes()
build_vignettes()
update.packages()
update.packages()
devtools::install_github("dpique/oncomix")
library(devtools)
build()
document()\
document()
getwd()
library(devtools)
build()
document()
install.packages("roxygen2")
document()
build_vignettes()
document()
build_vignettes()
document()
document()
build_vignettes()
build_vignettes()
library (nlme)
data(Oats)
str(Oats)
plot(Oats)
model1=lm(yield~Variety*nitro,data=Oats)
summary(model1)
model2=lme(yield~Variety*nitro,data=Oats,random=~1|Block/Variety)
summary(model2)
coef(model1)
coef(model2)
coef(model2)$`(Intercept)`
mean(coef(model2)$`(Intercept)`)
coef(model2)$`(Intercept)`
coef(model2)$`(Intercept)` - mean(coef(model2)$`(Intercept)`)
plot(ranef(model2))
ranef(model2)
ranef
?ranef
test = ranef
test = ranef(model2)
class(test)
test$Block
test$Variety
test = ranef(model2, augFrame = T)
test = ranef(model2, standard = T)
test
test = ranef(model2)
coef(model1)
coef(model2)
Oats
subset(Oats, subset = Block == "VI" & Variety == "Marvellous" )
testdf = subset(Oats, subset = Block == "VI" & Variety == "Marvellous" )
mean(testdf$yield)
fixed.effects(model2)
random.effects(model2)
dotplot(ranef(fm1, condVar=TRUE))
library(lattice)
dotplot(ranef(fm1, condVar=TRUE))
dotplot(ranef(model2, condVar=TRUE))
dotplot(ranef(model1, condVar=TRUE))
dotplot(ranef(model2, condVar=TRUE))
ranef(model2, condVar=TRUE)
dotplot(ranef(model2, condVar=TRUE)$Block)
dotplot(ranef(model2, condVar=TRUE)$Variety)
data = data.frame(cbind("expr" = c(rnorm(113, 3), c(rnorm(56,3), rnorm(57, mean =6)))), type=c(rep(2, 113), rep(1,113)))
data
data = data.frame(cbind("expr" = c(rnorm(113, 3), c(rnorm(56,3), rnorm(57, mean =6)))), "type"=c(rep(2, 113), rep(1,113)))
data
oncoMixTraditionalDE <- function(means=c(3,7)){
ggplot(data.frame(cbind(expr = c(rnorm(113, 3), c(rnorm(56,3), rnorm(57, mean =6)))), type=c(rep(2, 113), rep(1,113))), aes(x=expr, color=as.factor(type), fill=as.factor(type), group=as.factor(type))) + theme_classic() + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),legend.position = "none", plot.title = element_text(size = 12), axis.text=element_text(size=8), axis.title=element_text(size=8), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())+ ggtitle("Theoretical") + xlim(-0.2,10) +
stat_function(fun = "dnorm", colour = "#F8766D", args = list(mean=means[1], sd=1), size = 5) +
stat_function(fun = dnorm, colour = "#00BFC4", args = list(mean=means[2], sd=1), size = 5) #+
}
oncoMixTraditionalDE()
oncoMixTraditionalDE <- function(means=c(3,7)){
ggplot(data.frame(cbind(expr = c(rnorm(113, 3), c(rnorm(56,3), rnorm(57, mean =6)))), type=c(rep(2, 113), rep(1,113))), aes(x=expr, color=as.factor(type), fill=as.factor(type), group=as.factor(type))) + theme_classic() + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),legend.position = "none", plot.title = element_text(size = 12), axis.text=element_text(size=8), axis.title=element_text(size=8), axis.title.x=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank())+ ggtitle("Theoretical") + xlim(-0.2,10) +
stat_function(fun = "dnorm", colour = "#F8766D", args = list(mean=means[1], sd=1), size = 5) +
stat_function(fun = "dnorm", colour = "#00BFC4", args = list(mean=means[2], sd=1), size = 5) #+
}
oncoMixTraditionalDE()
d2 = data.frame(cbind("expr" = c(rnorm(113, 3), c(rnorm(56,3), rnorm(57, mean =6)))), type=c(rep(2, 113), rep(1,113)))
d2
expr <- type <- ..density.. <- NULL # Setting the variables to NULL first
..density
getwd()
plotGeneHist <- function(mmParams, dfNml, dfTumor, isof){
tidy_df <- as.data.frame(cbind(as.numeric(c(dfTumor[,isof], dfNml[,isof])),
as.factor(c(rep("tumor",nrow(dfTumor)), rep("normal",nrow(dfNml))))),
stringsAsFactors = F)
colnames(tidy_df) <- c("expr", "type")
expr <- type <- ..density.. <- NULL # Setting the variables to NULL first
p1 = ggplot(tidy_df, aes(x=expr, color=as.factor(type), fill=as.factor(type),
group=as.factor(type))) +
theme_classic() +
geom_histogram(data=subset(tidy_df,type == 1),fill = "#F8766D",
alpha = 0.2, aes(y="..density..")) +
geom_histogram(data=subset(tidy_df,type == 2),fill = "#00BFC4",
alpha = 0.2, aes(y="..density..")) +
geom_rug(alpha=0.3, show.legend=FALSE) +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(),
axis.ticks.y=element_blank(),legend.position = "none",
plot.title = element_text(size = 12),
axis.text=element_text(size=8), axis.title=element_text(size=8)) +
ggtitle(paste0(isof, " : SI = ",
round(mmParams[isof,"SI"],4)))+
xlab(expression(Log[2] *"(TPM Reads)")) +
stat_function(fun = "dnorm", colour = "#F8766D",
args = list(mean = mmParams[isof,"n.mu.2"],
sd=sqrt(mmParams[isof,"n.var"]))) +
stat_function(fun = "dnorm", colour = "#F8766D",
args = list(mean = mmParams[isof,"n.mu.1"],
sd=sqrt(mmParams[isof,"n.var"]))) +
stat_function(fun = "dnorm", colour = "#00BFC4",
args = list(mean = mmParams[isof,"t.mu.2"],
sd=sqrt(mmParams[isof,"t.var"]))) +
stat_function(fun = "dnorm", colour = "#00BFC4",
args = list(mean = mmParams[isof,"t.mu.1"],
sd=sqrt(mmParams[isof,"t.var"])))
print(p1)
}
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
#devtools::install_github("dpique/oncomix")
library(oncomix)
library(ggplot2)
oncomix::oncoMixIdeal()
oncoMixTraditionalDE()
data(dfNmlIsof, dfTumorIsof, package="oncomix")
dim(dfNmlIsof)
dfNmlIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from adjacent normal samples
dim(dfTumorIsof)
dfTumorIsof[1:5, 1:5] #take a look at the matrix of mRNA expression data from tumors
mmParams = oncomix::mixModelParams(dfNmlIsof, dfTumorIsof) #fits the mixture models, will take a few minutes
mmParams = oncomix::mixModelParams(dfNmlIsof, dfTumorIsof) #fits the mixture models, will take a few minutes
head(mmParams)
plotGeneHist(mmParams, dfNml, dfTumor, isof)
plotGeneHist(mmParams, dfNml = dfNmlIsof, dfTumor = dfTumorIsof, isof = "uc002jxc.2")
quantile
stats::quantile
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- stats::quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- stats::quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
x = ggplot(data = as.data.frame(mmParams), aes(x = "deltaMu2", y = 1/(abs("deltaMu1") + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = "deltaMu2", y = 1/(abs("deltaMu1")+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = "deltaMu2", y = 1/(abs("deltaMu1")+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
geom_text_repel(data = mmParams.si, aes(x = "deltaMu2", y = 1/(abs("deltaMu1")+alpha1)),
label = rownames(mmParams.si)) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams)
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- stats::quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- stats::quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
deltaMu2 <- deltaMu1 <- NULL
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
#print(x)
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
geom_text_repel(data = mmParams.si, aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
label = rownames(mmParams.si)) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
scatterMixPlot(mmParams)
data(dfTumor, dfNml)
document()
library(devtools)
document()
build_vignettes()
plotGeneHist <- function(mmParams, dfNml, dfTumor, isof){
tidy_df <- as.data.frame(cbind(as.numeric(c(dfTumor[,isof], dfNml[,isof])),
as.factor(c(rep("tumor",nrow(dfTumor)), rep("normal",nrow(dfNml))))),
stringsAsFactors = F)
colnames(tidy_df) <- c("expr", "type")
expr <- type <- ..density.. <- NULL # Setting the variables to NULL first
p1 = ggplot(tidy_df, aes(x=expr, color=as.factor(type), fill=as.factor(type),
group=as.factor(type))) +
theme_classic() +
geom_histogram(data=subset(tidy_df,type == 1),fill = "#F8766D",
alpha = 0.2, aes(y="..density..")) +
geom_histogram(data=subset(tidy_df,type == 2),fill = "#00BFC4",
alpha = 0.2, aes(y="..density..")) +
geom_rug(alpha=0.3, show.legend=FALSE) +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(),
axis.ticks.y=element_blank(),legend.position = "none",
plot.title = element_text(size = 12),
axis.text=element_text(size=8), axis.title=element_text(size=8)) +
ggtitle(paste0(isof, " : SI = ",
round(mmParams[isof,"SI"],4)))+
xlab(expression(Log[2] *"(TPM Reads)")) +
stat_function(fun = "dnorm", colour = "#F8766D",
args = list(mean = mmParams[isof,"n.mu.2"],
sd=sqrt(mmParams[isof,"n.var"]))) +
stat_function(fun = "dnorm", colour = "#F8766D",
args = list(mean = mmParams[isof,"n.mu.1"],
sd=sqrt(mmParams[isof,"n.var"]))) +
stat_function(fun = "dnorm", colour = "#00BFC4",
args = list(mean = mmParams[isof,"t.mu.2"],
sd=sqrt(mmParams[isof,"t.var"]))) +
stat_function(fun = "dnorm", colour = "#00BFC4",
args = list(mean = mmParams[isof,"t.mu.1"],
sd=sqrt(mmParams[isof,"t.var"])))
print(p1)
}
plotGeneHist(mmParams)
plotGeneHist(mmParams, dfTumorIsof, dfNmlIsof, "uc002jxc.2")
expr <- type <- ..density.. <- NULL # Setting the variables to NULL first
..density..
document()
build_vignettes()
plotGeneHist <- function(mmParams, dfNml, dfTumor, isof){
tidy_df <- as.data.frame(cbind(as.numeric(c(dfTumor[,isof], dfNml[,isof])),
as.factor(c(rep("tumor",nrow(dfTumor)), rep("normal",nrow(dfNml))))),
stringsAsFactors = F)
colnames(tidy_df) <- c("expr", "type")
expr <- type <- ..density.. <- NULL # Setting the variables to NULL first
p1 = ggplot(tidy_df, aes(x=expr, color=as.factor(type), fill=as.factor(type),
group=as.factor(type))) +
theme_classic() +
geom_histogram(data=subset(tidy_df,type == 1),fill = "#F8766D",
alpha = 0.2, aes(y=..density..)) +
geom_histogram(data=subset(tidy_df,type == 2),fill = "#00BFC4",
alpha = 0.2, aes(y=..density..)) +
geom_rug(alpha=0.3, show.legend=FALSE) +
theme(axis.title.y=element_blank(), axis.text.y=element_blank(),
axis.ticks.y=element_blank(),legend.position = "none",
plot.title = element_text(size = 12),
axis.text=element_text(size=8), axis.title=element_text(size=8)) +
ggtitle(paste0(isof, " : SI = ",
round(mmParams[isof,"SI"],4)))+
xlab(expression(Log[2] *"(TPM Reads)")) +
stat_function(fun = "dnorm", colour = "#F8766D",
args = list(mean = mmParams[isof,"n.mu.2"],
sd=sqrt(mmParams[isof,"n.var"]))) +
stat_function(fun = "dnorm", colour = "#F8766D",
args = list(mean = mmParams[isof,"n.mu.1"],
sd=sqrt(mmParams[isof,"n.var"]))) +
stat_function(fun = "dnorm", colour = "#00BFC4",
args = list(mean = mmParams[isof,"t.mu.2"],
sd=sqrt(mmParams[isof,"t.var"]))) +
stat_function(fun = "dnorm", colour = "#00BFC4",
args = list(mean = mmParams[isof,"t.mu.1"],
sd=sqrt(mmParams[isof,"t.var"])))
print(p1)
}
plotGeneHist(mmParams, dfNml, dfTumor, isof)
plotGeneHist(mmParams, dfTumorIsof, dfNmlIsof, "uc002jxc.2")
build_vignettes()
install.packages("ggrepel")
install.packages("ggrepel")
build_vignettes()
library(ggrepel)
install.packages("ggrepel")
install.packages("ggrepel")
build_vignettes()
library(devtools)
build_vignettes()
build()
install("../cats")
install("../oncomix")
build_vignettes()
ggrepel::geom_text_repel
mmParams
rownames(mmParams.top10)
scatterMixPlot(mmParams = mmParams, gene_labels = rownames(mmParams.top10))
oncomix::scatterMixPlot()
oncomix::scatterMixPlot
gene_labels = rownames(mmParams.top10)
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- stats::quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- stats::quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
deltaMu2 <- deltaMu1 <- NULL
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggrepel::geom_text_repel(data = mmParams.si, aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
label = rownames(mmParams.si)) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
x
document()
install("../oncomix/")
install()
library(devtools)
build_vignettes()
?stats
build_vignettes()
scatterMixPlot <- function(mmParams, selIndThresh = 1, gene_labels = NULL){
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- stats::quantile(mmParams[,"deltaMu2"], quants)
deltaMu1Quant <- stats::quantile(1/(abs(mmParams[,"deltaMu1"]) + alpha1), quants)
deltaMu2 <- deltaMu1 <- NULL
x = ggplot(data = as.data.frame(mmParams), aes(x = deltaMu2, y = 1/(abs(deltaMu1) + alpha1))) +
theme_classic() +
geom_hline(yintercept = deltaMu1Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_vline(xintercept = deltaMu2Quant, col = colors_red, size = c(1,1,1,1,1)) +
geom_point(alpha= 0.5) +
xlab(expression(paste(Delta, mu[2]))) +
ylab(expression(paste(frac(1, paste(Delta, mu[1], " + ", alpha)))))
if(selIndThresh < 1){
mmParams.si = mmParams[mmParams$SI > selIndThresh,]
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))*", SI >"~.(selIndThresh)))
} else if(!is.null(gene_labels)){
mmParams.si = mmParams[gene_labels,]
mmParams.si$gene_labels = gene_labels
x = x + geom_point(data = as.data.frame(mmParams.si),
aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
size = 10, alpha=0.1,
col=colors_red[length(colors_red)],
fill=colors_red[length(colors_red)]) +
ggrepel::geom_text_repel(data = mmParams.si, aes(x = deltaMu2, y = 1/(abs(deltaMu1)+alpha1)),
label = rownames(mmParams.si)) +
ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
} else{
x = x + ggtitle(bquote(Distribution~of~Mixture~Model~Parameters*","~alpha~"="~.(round(alpha1,2))))
}
return(x)
}
library(ggrepel)
scatterMixPlot(mmParams, selIndThresh = 1, gene_labels = NULL)
document()
deltaMu2Quant <- stats::quantile(mmParams[,"deltaMu2"], quants)
mmParams = as.data.frame(mmParams)
one_over_alpha = diff(range(mmParams$deltaMu2))
alpha1 = 1/one_over_alpha
quants = c(0.01, 0.10, 0.50, 0.90, 0.99) #add in the quantiles
colors_red=RColorBrewer::brewer.pal(n=length(quants), name="Reds")
deltaMu2Quant <- stats::quantile(mmParams[,"deltaMu2"], quants)
deltaMu2Quant
build_vignettes()
geom_text_repel
document()
build_vignette()
build_vignettes()
devtools::check()
